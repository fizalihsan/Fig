apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'cargo'

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Configuration Properties ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sourceCompatibility = 1.7
version = '0.0.1'
final tomcatHome = "C:/apps/xampp/tomcat/"
final deployDir = "${tomcatHome}/webapps"
final cleanOldDeploymentCmd = "rm -rf ${deployDir}/Fig-${version}"

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Repositories  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6.1'
    }
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Library dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
final jettyVersion = '9.1.0.v20131115'
final jerseyVersion = '2.4'
final neo4jVersion = '1.9.5'

dependencies {
    //Databinding Libraries
//    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3' //http://wiki.fasterxml.com/JacksonInFiveMinutes
    compile 'com.google.code.gson:gson:2.2.4' //https://sites.google.com/site/gson/gson-user-guide

    //Jetty server libraries
    compile group: 'org.eclipse.jetty', name: 'jetty-project', version: "${jettyVersion}"
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: "${jettyVersion}"
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: "${jettyVersion}"
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: "${jettyVersion}"

    //Neo4j Database
    //Revisit this later. We don't need all the neo4j libraries from top-level.
    compile "org.neo4j:neo4j:${neo4jVersion}"

    //Webservice Libraries
    compile "javax.ws.rs:javax.ws.rs-api:2.0"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
    compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"

    //Web Application Deployment
    cargo "org.codehaus.cargo:cargo-core-uberjar:1.3.3"
    cargo "org.codehaus.cargo:cargo-extensions-ant:1.3.3"

    //Logging frameworks
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.+' //needed for logback groovy config

    //Unit testing libraries
    testCompile group: 'junit', name: 'junit', version: '4.11'

    //YAML (Snakeyaml library)
    compile 'org.yaml:snakeyaml:1.13'
}



//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Web Application Deployment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
task deployToTomcat(type: Copy) {
    dependsOn(clean, war)
    from war //The WAR task is aware of the artifacts it generates
    into deployDir
}

//Cargo plugin - https://github.com/bmuschko/gradle-cargo-plugin
cargo {
    containerId = 'tomcat7x' //List of supported containers - http://cargo.codehaus.org/Home
    port = 8080 //The TCP port the container responds on

    deployable { //this closure defines the deployable artifact.
//        file = file('xxxx.war') //artifact to deploy. Defaults to the project artifact
        context = 'fig' //The URL context the container is handling your web application on (defaults to WAR/EAR name)
    }

    local {
        homeDir = file("C:\\apps\\xampp\\tomcat\\")
        output = file('build/catalina.out')
    }
}


//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Temporary solution for Tomcat deployment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

task tomcatStop {
    executeCmd("${tomcatHome}/bin/shutdown.bat")
}

task tomcatStart {
    executeCmd("ls -l ")
    executeCmd("${tomcatHome}/bin/startup.bat")
}

task cleanOldTomcatDeployment {
    command = "rm -rf ${deployDir}/Fig-${version}"
    println (command)
    executeCmd(command)
}

task deployToTomcatAndRestart {
    dependsOn(deployToTomcat, tomcatStop, cleanOldTomcatDeployment, tomcatStart)
}

def executeCmd(command) {
    proc = command.execute()
    proc.waitFor()
}
