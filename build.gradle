apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'sonar-runner' //sonar server should be running to execute this.
apply plugin: 'groovy' //for Spock testing
apply plugin: 'idea' //for creating Intellij module file automatically. <gradle ideaModule>
//apply plugin: 'miredot'
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Configuration Properties ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
version = '0.0.1'
final tomcatHome = "C:/apps/xampp/tomcat/"
final deployDir = "${tomcatHome}/webapps"

test{  jvmArgs '-Xms64m', '-Xmx512m', '-XX:MaxPermSize=128m' }

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/groovy'
        }
        resources { srcDir 'src/main/resources' }
    }

    test{
        java {
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
        resources { srcDir 'src/test/resources' }
    }
}
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Repositories  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

repositories { mavenCentral() }

/*
task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}
*/

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Library dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
final gsCollectionsVersion = "4.2.0"
final jerseyVersion = '2.4'
final neo4jVersion = '1.9.5'

dependencies {
    //ActiveMQ libraries
    compile "org.apache.activemq:activemq-all:5.9.0"

    //Collection Libraries
    compile "com.goldmansachs:gs-collections-api:${gsCollectionsVersion}",
            "com.goldmansachs:gs-collections:${gsCollectionsVersion}",
            "com.goldmansachs:gs-collections-forkjoin:${gsCollectionsVersion}"

    //Databinding Libraries
//    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3' //http://wiki.fasterxml.com/JacksonInFiveMinutes
    compile 'com.google.code.gson:gson:2.2.4' //https://sites.google.com/site/gson/gson-user-guide

    // HTTP Client -
    // HTTP Builder - Groovy REST Client
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'){
        exclude group: 'org.codehaus.groovy' //excluding older version of groovy 
    }

    //Logging frameworks
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
    compile 'org.codehaus.groovy:groovy-all:2.1.9' //needed for logback groovy config

    //Miredot
    /*compile 'com.qmino:miredot-maven-plugin:1.2.1'*/

    //Neo4j Database
    //Revisit this later. We don't need all the neo4j libraries from top-level.
    compile "org.neo4j:neo4j:${neo4jVersion}",
            "org.neo4j:neo4j-shell:${neo4jVersion}"
    compile("org.neo4j.app:neo4j-server:${neo4jVersion}") {
        exclude group: 'janino' //pulls 2.5.10, but we need 2.6.1
        exclude group: 'ch.qos.logback'
        exclude group: 'com.sun.jersey' //old version conflicts with Jersey 2
        //exclude group: 'org.mortbay.jetty' //Excluding servlet-api for Embedded Tomcat to work
    }
    compile "org.codehaus.janino:janino:2.6.1"

    //Tinkerpop libraries
    /*compile 'com.tinkerpop.blueprints:blueprints-core:2.4.0'
    compile 'com.tinkerpop.blueprints:blueprints-neo4j-graph:2.4.0'*/

    //Webservice Libraries
    compile "javax.ws.rs:javax.ws.rs-api:2.0"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
    compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"

    //Unit testing libraries
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    compile group: "org.neo4j", name: "neo4j-kernel", version: "${neo4jVersion}"
    compile group: "org.neo4j", name: "neo4j-kernel", version: "${neo4jVersion}", classifier: "tests"
//    testCompile group: "org.neo4j", name: "neo4j-kernel", version: "${neo4jVersion}", classifier: "tests"

    testCompile "com.thoughtworks.qdox:qdox:2.0-M1"

    /*testCompile 'org.apache.tomcat:tomcat-catalina:7.0.42'
    testCompile 'org.apache.tomcat:tomcat-coyote:7.0.42'
    testCompile 'org.apache.tomcat:tomcat-jasper:7.0.42'*/

    //YAML (Snakeyaml library)
    compile 'org.yaml:snakeyaml:1.13'
}

war{
    // NOTE: One of the below 2 options needs to be in place for the war files to be built correctly. Some jar files like activemq come with both classes and java files in it.
    // Becuase of that, during war build java files in them get compiled and becomes a part of the war file which causes the webapp to fail.
    tasks.withType(JavaCompile) { options.compilerArgs += ["-sourcepath", "''"]}
    //compileJava.options.compilerArgs = ["-implicit:none"]
}

//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Web Application Deployment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
task deployToTomcat(type: Copy) {
    dependsOn(clean, war)
    from war //The WAR task is aware of the artifacts it generates
    into deployDir
}
